[dev]
# Host URL for the elevate user service
elevateuserhost = https://project-dev.elevate-apis.shikshalokam.org/

# Host URL for the elevate project service
elevateprojecthost = https://project-dev.elevate-apis.shikshalokam.org/project/v1/

# Host URL for the elevate entity service
elevateentityhost = https://project-dev.elevate-apis.shikshalokam.org/

# Endpoint for user login API
userlogin = /user/v1/account/login

# Authorization token for API requests (to be added)
authorization = Bearer  # ADD_YOUR_TOKEN_HERE

# Authorization token specifically for host API requests (to be added)
authorizationforhost = Bearer # ADD_YOUR_TOKEN_HERE

# Application name, typically used in headers or logs
appname = diksha

# Channel ID for identifying the request source
x-channel-id = 0125747659358699520

# Content type for Keycloak API requests
keyclockapicontent-type = application/x-www-form-urlencoded

# Default content type for API requests
content-type = application/json

# Endpoint for fetching user information
userinfoapiurl = profile/read

# Endpoint for searching locations in the entity management service
searchforlocation = entity-management/v1/entities/find

# Endpoint for fetching program information
fetchprograminfoapiurl = programs/list?page=1&limit=5&search=

# Endpoint for fetching solution details
fetchsolutiondetails = solutions/list?page=1&limit=100&search=&type=observation&subType

# Endpoint for updating a solution
solutionupdateapi = solutions/update/

# Endpoint for uploading project templates in bulk
projectuploadapi = project/templates/bulkCreate

# Endpoint for uploading project template tasks in bulk
taskuploadapi = project/templateTasks/bulkCreate/

# Endpoint for creating a project solution
projectsolutioncreationapi = solutions/create

# Endpoint for mapping a solution to a project
mapsolutiontoproject = project/templates/importProjectTemplate/

# Endpoint for fetching solution details
fetchsolutiondoc = solutions/getDetails/

# Endpoint for creating a program
programcreationurl = programs/create

# Endpoint for performing a database find operation for certificate base templates
dbfindapi = /admin/dbFind/certificateBaseTemplates

# Endpoint for creating or updating a certificate template
addcertificatetemplate = certificateTemplates/createOrUpdate

# Endpoint for uploading a certificate template as SVG
uploadcertificatetosvg = certificateTemplates/uploadTemplate/

# Endpoint for editing an SVG template
editsvgtemp = certificateTemplates/createSvg?baseTemplateId=

# Endpoint for updating a project template
updateprojecttemplate = project/templates/update/

# Endpoint for fetching a link related to a solution
fetchlink = solutions/fetchLink/

# Endpoint for reading course details
readcourseurl = api/content/v1/read/

# Endpoint for fetching organization details
fetchorgdetails = api/org/v1/search

# Endpoint for fetching URL
fetchPreSignedUrl = cloud-services/files/preSignedUrls

# The URL to connect to the MongoDB instance running
mongo_url = mongodb://localhost:27017/

# The name of the database in the MongoDB instance
database_name = qadb

# Comma-separated names of the collections that may need to be dropped
collection_name = entityTypes, entities

# Configuration for different logo-signature combinations (likely used in templates)
onelogo-onesignature = onelogo_onesign
onelogo-twosignature = onelogo_twosign
twologo-onesignature = twologo_onesign
twologo-twosignature = twologo_twosign


[QA]
# Host URL for the elevate user service
elevateuserhost = https://project-qa.elevate-apis.shikshalokam.org/

# Host URL for the elevate project service
elevateprojecthost = https://project-qa.elevate-apis.shikshalokam.org/project/v1/

# Host URL for the elevate entity service
elevateentityhost = https://project-qa.elevate-apis.shikshalokam.org/

# Endpoint for user login API
userlogin = user/v1/account/login

# Authorization token for API requests (to be added)
authorization = Bearer  # ADD_YOUR_TOKEN_HERE

# Authorization token specifically for host API requests (to be added)
authorizationforhost = Bearer # ADD_YOUR_TOKEN_HERE

# Application name, typically used in headers or logs
appname = diksha

# Channel ID for identifying the request source
x-channel-id = 0125747659358699520

# Content type for Keycloak API requests
keyclockapicontent-type = application/x-www-form-urlencoded

# Default content type for API requests
content-type = application/json

# Endpoint for fetching user information
userinfoapiurl = profile/read

# Endpoint for searching locations in the entity management service
searchforlocation = entity-management/v1/entities/find

# Endpoint for fetching program information
fetchprograminfoapiurl = programs/list?page=1&limit=5&search=

# Endpoint for fetching solution details
fetchsolutiondetails = solutions/list?page=1&limit=100&search=&type=observation&subType

# Endpoint for updating a solution
solutionupdateapi = solutions/update/

# Endpoint for uploading project templates in bulk
projectuploadapi = project/templates/bulkCreate

# Endpoint for uploading project template tasks in bulk
taskuploadapi = project/templateTasks/bulkCreate/

# Endpoint for creating a project solution
projectsolutioncreationapi = solutions/create

# Endpoint for mapping a solution to a project
mapsolutiontoproject = project/templates/importProjectTemplate/

# Endpoint for fetching solution details
fetchsolutiondoc = solutions/getDetails/

# Endpoint for creating a program
programcreationurl = programs/create

# Endpoint for performing a database find operation for certificate base templates
dbfindapi = /admin/dbFind/certificateBaseTemplates

# Endpoint for creating or updating a certificate template
addcertificatetemplate = certificateTemplates/createOrUpdate

# Endpoint for uploading a certificate template as SVG
uploadcertificatetosvg = certificateTemplates/uploadTemplate/

# Endpoint for editing an SVG template
editsvgtemp = certificateTemplates/createSvg?baseTemplateId=

# Endpoint for updating a project template
updateprojecttemplate = project/templates/update/

# Endpoint for fetching a link related to a solution
fetchlink = solutions/fetchLink/

# Endpoint for reading course details
readcourseurl = api/content/v1/read/

# Endpoint for fetching organization details
fetchorgdetails = api/org/v1/search

# Endpoint for fetching URL
fetchPreSignedUrl = cloud-services/files/preSignedUrls


# The URL to connect to the MongoDB instance running
mongo_url = mongodb://localhost:27017/

# The name of the database in the MongoDB instance
database_name = dbname

# Comma-separated names of the collections that may need to be dropped
collection_name = entityTypes, entities

# Configuration for different logo-signature combinations (likely used in templates)
onelogo-onesignature = onelogo_onesign
onelogo-twosignature = onelogo_twosign
twologo-onesignature = twologo_onesign
twologo-twosignature = twologo_twosign


[local]
# Host URL for the elevate user service
elevateuserhost = http://localhost:3001/


; # Host URL for the elevate project service
elevateprojecthost = http://localhost:5000/project/v1/

; # Host URL for the elevate entity service
elevateentityhost = http://localhost:5001/

# Endpoint for user login API
userlogin = user/v1/account/login

# Authorization token for API requests (to be added)
authorization = Bearer

# Authorization token specifically for host API requests (to be added)
authorizationforhost = Bearer # ADD_YOUR_TOKEN_HERE

# Application name, typically used in headers or logs
appname = diksha

# Channel ID for identifying the request source
x-channel-id = 0125747659358699520

# Content type for Keycloak API requests
keyclockapicontent-type = application/x-www-form-urlencoded

# Default content type for API requests
content-type = application/json

# Endpoint for fetching user information
userinfoapiurl = profile/read

# Endpoint for searching locations in the entity management service
searchforlocation = entity/v1/entities/find

# Endpoint for fetching program information
fetchprograminfoapiurl = programs/list?page=1&limit=5&search=

# Endpoint for fetching solution details
fetchsolutiondetails = solutions/list?page=1&limit=100&search=&type=observation&subType

# Endpoint for updating a solution
solutionupdateapi = solutions/update/

# Endpoint for uploading project templates in bulk
projectuploadapi = project/templates/bulkCreate

# Endpoint for uploading project template tasks in bulk
taskuploadapi = project/templateTasks/bulkCreate/

# Endpoint for creating a project solution
projectsolutioncreationapi = solutions/create

# Endpoint for mapping a solution to a project
mapsolutiontoproject = project/templates/importProjectTemplate/

# Endpoint for fetching solution details
fetchsolutiondoc = solutions/getDetails/

# Endpoint for performing a database find operation for certificate base templates
dbfindapi = admin/dbFind/certificateBaseTemplates

# Endpoint for creating or updating a certificate template
addcertificatetemplate = certificateTemplates/createOrUpdate

# Endpoint for uploading a certificate template as SVG
uploadcertificatetosvg = certificateTemplates/uploadTemplate/

# Endpoint for editing an SVG template
editsvgtemp = certificateTemplates/createSvg?baseTemplateId=

# Endpoint for updating a project template
updateprojecttemplate = project/templates/update/

# Endpoint for creating a program
programcreationurl = programs/create

# Endpoint for fetching a link related to a solution
fetchlink = solutions/fetchLink/

# Endpoint for reading course details
readcourseurl = api/content/v1/read/

# Endpoint for fetching organization details
fetchorgdetails = api/org/v1/search

# Endpoint for fetching URL
fetchPreSignedUrl = cloud-services/files/preSignedUrls

# The URL to connect to the MongoDB instance running
mongo_url = mongodb://localhost:27017/

# The name of the database in the MongoDB instance
database_name = Innov

# Comma-separated names of the collections that may need to be dropped
collection_name = entityTypes, entities, userRoleExtension

# Configuration for different logo-signature combinations (likely used in templates)
onelogo-onesignature = onelogo_onesign
onelogo-twosignature = onelogo_twosign
twologo-onesignature = twologo_onesign
twologo-twosignature = twologo_twosign




[PROD]
# Host URL for the elevate user service
elevateuserhost = https://project-elevate-apis.shikshalokam.org/

# Host URL for the elevate project service
elevateprojecthost = https://project-elevate-apis.shikshalokam.org/project/v1/

# Host URL for the elevate entity service
elevateentityhost = https://project-elevate-apis.shikshalokam.org/

# Endpoint for user login API
userlogin = user/v1/account/login

# Authorization token for API requests (to be added)
authorization = Bearer  # ADD_YOUR_TOKEN_HERE

# Authorization token specifically for host API requests (to be added)
authorizationforhost = Bearer # ADD_YOUR_TOKEN_HERE

# Application name, typically used in headers or logs
appname = diksha

# Channel ID for identifying the request source
x-channel-id = 0125747659358699520

# Content type for Keycloak API requests
keyclockapicontent-type = application/x-www-form-urlencoded

# Default content type for API requests
content-type = application/json

# Endpoint for fetching user information
userinfoapiurl = profile/read

# Endpoint for searching locations in the entity management service
searchforlocation = entity-management/v1/entities/find

# Endpoint for fetching program information
fetchprograminfoapiurl = programs/list?page=1&limit=5&search=

# Endpoint for fetching solution details
fetchsolutiondetails = solutions/list?page=1&limit=100&search=&type=observation&subType

# Endpoint for updating a solution
solutionupdateapi = solutions/update/

# Endpoint for uploading project templates in bulk
projectuploadapi = project/templates/bulkCreate

# Endpoint for uploading project template tasks in bulk
taskuploadapi = project/templateTasks/bulkCreate/

# Endpoint for creating a project solution
projectsolutioncreationapi = solutions/create

# Endpoint for mapping a solution to a project
mapsolutiontoproject = project/templates/importProjectTemplate/

# Endpoint for fetching solution details
fetchsolutiondoc = solutions/getDetails/

# Endpoint for creating a program
programcreationurl = programs/create

# Endpoint for performing a database find operation for certificate base templates
dbfindapi = admin/dbFind/certificateBaseTemplates

# Endpoint for creating or updating a certificate template
addcertificatetemplate = certificateTemplates/createOrUpdate

# Endpoint for uploading a certificate template as SVG
uploadcertificatetosvg = certificateTemplates/uploadTemplate/

# Endpoint for editing an SVG template
editsvgtemp = certificateTemplates/createSvg?baseTemplateId=

# Endpoint for updating a project template
updateprojecttemplate = project/templates/update/

# Endpoint for fetching a link related to a solution
fetchlink = solutions/fetchLink/

# Endpoint for reading course details
readcourseurl = api/content/v1/read/

# Endpoint for fetching organization details
fetchorgdetails = api/org/v1/search

# Endpoint for fetching URL
fetchPreSignedUrl = cloud-services/files/preSignedUrls

# The URL to connect to the MongoDB instance running
mongo_url = mongodb://localhost:27017/

# The name of the database in the MongoDB instance
database_name = dbname

# Comma-separated names of the collections that may need to be dropped
collection_name = entityTypes, entities

# Configuration for different logo-signature combinations (likely used in templates)
onelogo-onesignature = onelogo_onesign
onelogo-twosignature = onelogo_twosign
twologo-onesignature = twologo_onesign
twologo-twosignature = twologo_twosign